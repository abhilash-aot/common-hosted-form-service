- apiVersion: apps/v1
    kind: Deployment
     metadata:
      name: "${APP_NAME}-app-${JOB_NAME}"
    spec:
      replicas: ${{REPLICAS}}
      revisionHistoryLimit: 10
      selector:
        matchLabels:
          app: "${APP_NAME}-${JOB_NAME}"
        role: app
      strategy: 
        type: RollingUpdate
        resources: {}
        rollingParams:
          timeoutSeconds: 600
          pre:
            failurePolicy: Retry
            execNewPod:
              command:
                - npm
                - run
                - migrate
              containerName: "app"
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-db-name
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_HOST
                  value: "patroni-${JOB_NAME}"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-${JOB_NAME}-secret"
                - name: SERVER_BASEPATH
                  value: "${ROUTE_PATH}"
      template:
        metadata:
          labels:
            app: "${APP_NAME}-${JOB_NAME}"
            deploymentconfig: "${APP_NAME}-app-${JOB_NAME}"
            role: app
        spec:
          containers:
            - name: app
              image: "${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${REPO_NAME}:${IMAGE_TAG}"
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: "${ROUTE_PATH}/api"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 3
                failureThreshold: 3
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: "${ROUTE_PATH}/api"
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                timeoutSeconds: 3
                failureThreshold: 1
              resources:
                requests:
                  cpu: "${CPU_REQUEST}"
                  memory: "${MEMORY_REQUEST}"
                limits:
                  cpu: "${CPU_LIMIT}"
                  memory: "${MEMORY_LIMIT}"
              env:
                - name: NODE_ENV
                  value: production
                - name: DB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: app-db-name
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_HOST
                  value: "patroni-${JOB_NAME}"
                - name: DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: app-db-username
                      name: "patroni-${JOB_NAME}-secret"
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: app-db-password
                      name: "patroni-${JOB_NAME}-secret"
                - name: FRONTEND_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: VITE_FRONTEND_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: VITE_CONTACT
                  valueFrom:
                    secretKeyRef:
                      key: email
                      name: "${APP_NAME}-contact-secret"
                - name: VITE_HOWTOURL
                  valueFrom:
                    secretKeyRef:
                      key: howtovideourl
                      name: "${APP_NAME}-landingpagevideourls-secret"
                - name: VITE_CHEFSTOURURL
                  valueFrom:
                    secretKeyRef:
                      key: chefstourvideourl
                      name: "${APP_NAME}-landingpagevideourls-secret"
                - name: VITE_BC_GEO_ADDRESS_APIURL
                  valueFrom:
                    secretKeyRef:
                      key: bcgeoaddressapiurl
                      name: "${APP_NAME}-bcgeoaddress-secret"
                - name: SERVER_BASEPATH
                  value: "${ROUTE_PATH}"
                - name: SERVER_KC_CLIENTID
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${APP_NAME}-keycloak-secret"
                - name: SERVER_KC_CLIENTSECRET
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${APP_NAME}-keycloak-secret"
                - name: SC_CS_CHES_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: ches_client_id
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CHES_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: ches_client_secret
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CDOGS_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      key: cdogs_client_id
                      name: "${APP_NAME}-sc-cs-secret"
                - name: SC_CS_CDOGS_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: cdogs_client_secret
                      name: "${APP_NAME}-sc-cs-secret"
                - name: FILES_OBJECTSTORAGE_ACCESSKEYID
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${APP_NAME}-objectstorage-secret"
                - name: FILES_OBJECTSTORAGE_SECRETACCESSKEY
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${APP_NAME}-objectstorage-secret"
                - name: SERVER_ENCRYPTION_PROXY
                  valueFrom:
                    secretKeyRef:
                      key: proxy
                      name: "${APP_NAME}-encryption-keys"
                - name: APITOKEN
                  valueFrom:
                    secretKeyRef:
                      key: mailapitoken
                      name: "chefs-${JOB_NAME}-secret"
                - name: EVENTSTREAMSERVICE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: "${APP_NAME}-event-stream-service"
                - name: EVENTSTREAMSERVICE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: "${APP_NAME}-event-stream-service"
                # - name: SERVER_LOGFILE
                #   value: "/var/log/app.log"
              envFrom:
                - configMapRef:
                    name: "${APP_NAME}-frontend-config"
                - configMapRef:
                    name: "${APP_NAME}-sc-config"
                - configMapRef:
                    name: "${APP_NAME}-server-config"
                - configMapRef:
                    name: "${APP_NAME}-service-config"
                - configMapRef:
                    name: "${APP_NAME}-files-config"
                - configMapRef:
                    name: "${APP_NAME}-oidc-config"
                - configMapRef:
                    name: "${APP_NAME}-custombcaddressformiocomponent-config"
                - configMapRef:
                    name: "${APP_NAME}-${JOB_NAME}-event-stream-service"
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            - name: log-storage
              emptyDir: {}
      test: false
